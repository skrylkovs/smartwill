import { useState, useEffect } from "react";
import {
    Box,
    Card,
    CardBody,
    CardHeader,
    Heading,
    Text,
    Badge,
    Button,
    VStack,
    HStack,
    Progress,
    Alert,
    AlertIcon,
    AlertTitle,
    AlertDescription,
    Divider,
    useToast,
    Icon
} from "@chakra-ui/react";
import { FaHeart, FaClock, FaEthereum, FaUser, FaShieldAlt, FaCheckCircle } from "react-icons/fa";
import { ethers } from "ethers";
import smartWillAbi from "../contracts/SmartWill.json";

interface Props {
    signer: ethers.Signer;
    willAddress: string;
}

interface WillInfo {
    owner: string;
    heir: string;
    heirName: string;
    heirRole: string;
    transferAmount: bigint;
    balance: bigint;
    isOwnerActive: boolean;
    lastActivity: bigint;
    willActivateWaitingPeriod: bigint;
    transferFrequency: bigint;
    nextPossibleTransferTime: bigint;
    canTransferNow: boolean;
}

export default function HeirDashboard({ signer, willAddress }: Props) {
    const [willInfo, setWillInfo] = useState<WillInfo | null>(null);
    const [loading, setLoading] = useState(false);
    const [transferLoading, setTransferLoading] = useState(false);
    const [countdown, setCountdown] = useState<string>("");
    const [ownerActivityCountdown, setOwnerActivityCountdown] = useState<string>("");

    const toast = useToast();

    const loadWillInfo = async () => {
        try {
            setLoading(true);
            const will = new ethers.Contract(willAddress, smartWillAbi.abi, signer);
            
            const [
                owner,
                heir,
                heirName,
                heirRole,
                transferAmount,
                balance,
                isOwnerActive,
                lastActivity,
                willActivateWaitingPeriod,
                transferFrequency,
                nextPossibleTransferTime,
                canTransferNow
            ] = await Promise.all([
                will.owner(),
                will.heir(),
                will.heirName(),
                will.heirRole(),
                will.transferAmount(),
                will.getBalance(),
                will.isOwnerActive(),
                will.lastActivity(),
                will.willActivateWaitingPeriod(),
                will.transferFrequency(),
                will.getNextPossibleTransferTime(),
                will.canTransferNow()
            ]);

            setWillInfo({
                owner,
                heir,
                heirName,
                heirRole,
                transferAmount,
                balance,
                isOwnerActive,
                lastActivity,
                willActivateWaitingPeriod,
                transferFrequency,
                nextPossibleTransferTime,
                canTransferNow
            });

        } catch (error: any) {
            toast({
                title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
                description: error.message,
                status: "error",
                duration: 5000
            });
        } finally {
            setLoading(false);
        }
    };

    const calculateCountdowns = () => {
        if (!willInfo) return;

        const currentTime = Math.floor(Date.now() / 1000);
        
        // –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        const timeUntilTransfer = Number(willInfo.nextPossibleTransferTime) - currentTime;
        
        // –í—Ä–µ–º—è –¥–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        const timeUntilOwnerInactive = Number(willInfo.lastActivity) + Number(willInfo.willActivateWaitingPeriod) - currentTime;

        if (timeUntilTransfer > 0) {
            const hours = Math.floor(timeUntilTransfer / 3600);
            const minutes = Math.floor((timeUntilTransfer % 3600) / 60);
            const seconds = timeUntilTransfer % 60;
            
            if (hours > 0) {
                setCountdown(`${hours}—á ${minutes}–º ${seconds}—Å`);
            } else if (minutes > 0) {
                setCountdown(`${minutes}–º ${seconds}—Å`);
            } else {
                setCountdown(`${seconds}—Å`);
            }
        } else {
            setCountdown("–î–æ—Å—Ç—É–ø–Ω–æ!");
        }

        if (willInfo.isOwnerActive && timeUntilOwnerInactive > 0) {
            const hours = Math.floor(timeUntilOwnerInactive / 3600);
            const minutes = Math.floor((timeUntilOwnerInactive % 3600) / 60);
            const seconds = timeUntilOwnerInactive % 60;
            
            if (hours > 0) {
                setOwnerActivityCountdown(`${hours}—á ${minutes}–º ${seconds}—Å`);
            } else if (minutes > 0) {
                setOwnerActivityCountdown(`${minutes}–º ${seconds}—Å`);
            } else {
                setOwnerActivityCountdown(`${seconds}—Å`);
            }
        } else {
            setOwnerActivityCountdown("–ù–µ–∞–∫—Ç–∏–≤–µ–Ω");
        }
    };

    const executeTransfer = async () => {
        if (!willInfo) return;

        try {
            setTransferLoading(true);
            const will = new ethers.Contract(willAddress, smartWillAbi.abi, signer);
            
            const tx = await will.transferToHeir();
            
            toast({
                title: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                description: "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤...",
                status: "info",
                duration: 3000
            });

            await tx.wait();
            
            toast({
                title: "‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã!",
                description: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${ethers.formatEther(willInfo.transferAmount)} ETH`,
                status: "success",
                duration: 5000
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            loadWillInfo();

        } catch (error: any) {
            let errorMessage = error.message;
            
            if (error.message.includes("Owner is still active")) {
                errorMessage = "–í–ª–∞–¥–µ–ª–µ—Ü –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –æ–∂–∏–¥–∞–Ω–∏—è.";
            } else if (error.message.includes("Transfer frequency limit")) {
                errorMessage = "–ù–µ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.";
            } else if (error.message.includes("Not enough balance")) {
                errorMessage = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∑–∞–≤–µ—â–∞–Ω–∏–∏.";
            }
            
            toast({
                title: "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞",
                description: errorMessage,
                status: "error",
                duration: 5000
            });
        } finally {
            setTransferLoading(false);
        }
    };

    useEffect(() => {
        loadWillInfo();
    }, [willAddress]);

    useEffect(() => {
        if (willInfo) {
            calculateCountdowns();
            const interval = setInterval(calculateCountdowns, 1000);
            return () => clearInterval(interval);
        }
    }, [willInfo]);

    if (loading) {
        return (
            <Box textAlign="center" py={10}>
                <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ...</Text>
            </Box>
        );
    }

    if (!willInfo) {
        return (
            <Alert status="error">
                <AlertIcon />
                <AlertTitle>–û—à–∏–±–∫–∞!</AlertTitle>
                <AlertDescription>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ</AlertDescription>
            </Alert>
        );
    }

    const progressValue = willInfo.isOwnerActive 
        ? ((Number(willInfo.lastActivity) + Number(willInfo.willActivateWaitingPeriod) - Math.floor(Date.now() / 1000)) / Number(willInfo.willActivateWaitingPeriod)) * 100
        : 0;

    return (
        <VStack spacing={6} align="stretch">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <Card bg="white">
                <CardHeader>
                    <HStack>
                        <Icon as={FaHeart} color="red.500" boxSize={6} />
                        <VStack align="start" spacing={0}>
                            <Heading size="lg">–ú–æ–µ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ</Heading>
                            <Text>
                                –ó–∞–≤–µ—â–∞–Ω–∏–µ: {willAddress.slice(0, 6)}...{willAddress.slice(-4)}
                            </Text>
                        </VStack>
                    </HStack>
                </CardHeader>
            </Card>

            {/* –°—Ç–∞—Ç—É—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞ */}
            <Card bg="white">
                <CardBody>
                    <VStack spacing={4}>
                        <HStack justify="space-between" width="100%">
                            <HStack>
                                <Icon as={FaUser} color={willInfo.isOwnerActive ? "green.500" : "red.500"} />
                                <Text fontWeight="semibold">–°—Ç–∞—Ç—É—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞</Text>
                            </HStack>
                            <Badge 
                                colorScheme={willInfo.isOwnerActive ? "green" : "red"} 
                                size="lg"
                                px={3}
                                py={1}
                            >
                                {willInfo.isOwnerActive ? "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" : "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
                            </Badge>
                        </HStack>

                        {willInfo.isOwnerActive && (
                            <Box width="100%">
                                <HStack justify="space-between" mb={2}>
                                    <Text fontSize="sm" color="gray.600">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:</Text>
                                    <Text fontSize="sm" fontWeight="semibold" color="green.500">
                                        {ownerActivityCountdown}
                                    </Text>
                                </HStack>
                                <Progress 
                                    value={progressValue} 
                                    colorScheme="green"
                                    size="lg"
                                    borderRadius="lg"
                                />
                                <Text fontSize="xs" color="gray.600" mt={1} textAlign="center">
                                    –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {new Date(Number(willInfo.lastActivity) * 1000).toLocaleString()}
                                </Text>
                            </Box>
                        )}

                        {willInfo.isOwnerActive && (
                            <Alert status="info" borderRadius="lg">
                                <AlertIcon />
                                <Box>
                                    <AlertTitle>‚ÑπÔ∏è –í–ª–∞–¥–µ–ª–µ—Ü –∞–∫—Ç–∏–≤–µ–Ω</AlertTitle>
                                    <AlertDescription>
                                        –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤–ª–∞–¥–µ–ª–µ—Ü —Å—Ç–∞–Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º. 
                                        –≠—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑ {ownerActivityCountdown}, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
                                    </AlertDescription>
                                </Box>
                            </Alert>
                        )}

                        {!willInfo.isOwnerActive && (
                            <Alert status="success" borderRadius="lg">
                                <AlertIcon />
                                <Box>
                                    <AlertTitle>‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω!</AlertTitle>
                                    <AlertDescription>
                                        –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ–ª–µ–µ {Math.floor(Number(willInfo.willActivateWaitingPeriod) / 60)} –º–∏–Ω—É—Ç. 
                                        –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã.
                                    </AlertDescription>
                                </Box>
                            </Alert>
                        )}
                    </VStack>
                </CardBody>
            </Card>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ—â–∞–Ω–∏–∏ */}
            <Card bg="white">
                <CardBody>
                    <VStack spacing={4}>
                        <HStack justify="space-between" width="100%">
                            <HStack>
                                <Icon as={FaEthereum} color="blue.500" />
                                <Text fontWeight="semibold">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ—â–∞–Ω–∏–∏</Text>
                            </HStack>
                        </HStack>

                        <VStack spacing={2} align="stretch">
                            <HStack justify="space-between">
                                <Text color="gray.600">–í–∞—à–µ –∏–º—è:</Text>
                                <Text fontWeight="semibold">{willInfo.heirName}</Text>
                            </HStack>
                            <HStack justify="space-between">
                                <Text color="gray.600">–í–∞—à–∞ —Ä–æ–ª—å:</Text>
                                <Text fontWeight="semibold">{willInfo.heirRole}</Text>
                            </HStack>
                            <HStack justify="space-between">
                                <Text color="gray.600">–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã:</Text>
                                <Text fontWeight="semibold" color="green.500">{ethers.formatEther(willInfo.transferAmount)} ETH</Text>
                            </HStack>
                            <HStack justify="space-between">
                                <Text color="gray.600">–ß–∞—Å—Ç–æ—Ç–∞ –≤—ã–ø–ª–∞—Ç:</Text>
                                <Text fontWeight="semibold">–ö–∞–∂–¥—ã–µ {Math.floor(Number(willInfo.transferFrequency) / 60)} –º–∏–Ω—É—Ç</Text>
                            </HStack>
                            <HStack justify="space-between">
                                <Text color="gray.600">–ë–∞–ª–∞–Ω—Å –∑–∞–≤–µ—â–∞–Ω–∏—è:</Text>
                                <Text fontWeight="semibold" color="blue.500">{ethers.formatEther(willInfo.balance)} ETH</Text>
                            </HStack>
                        </VStack>
                    </VStack>
                </CardBody>
            </Card>

            {/* –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ */}
            <Card bg={willInfo.canTransferNow ? "green.500" : "yellow.500"} borderWidth="2px">
                <CardBody>
                    <VStack spacing={4}>
                        <HStack justify="space-between" width="100%">
                            <HStack>
                                <Icon as={willInfo.canTransferNow ? FaCheckCircle : FaClock} color={willInfo.canTransferNow ? "green.500" : "yellow.500"} />
                                <Text fontWeight="semibold">–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤</Text>
                            </HStack>
                            <Badge 
                                colorScheme={willInfo.canTransferNow ? "green" : "yellow"} 
                                size="lg"
                                px={3}
                                py={1}
                            >
                                {willInfo.canTransferNow ? "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" : "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ"}
                            </Badge>
                        </HStack>

                        {!willInfo.canTransferNow && (
                            <Box width="100%">
                                <Text fontSize="sm" color="gray.600" mb={2} textAlign="center">
                                    –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑:
                                </Text>
                                <Text fontSize="2xl" fontWeight="bold" textAlign="center" color="yellow.500">
                                    {countdown}
                                </Text>
                                <Text fontSize="sm" color="gray.600" mt={2} textAlign="center">
                                    –í—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞: {new Date(Number(willInfo.nextPossibleTransferTime) * 1000).toLocaleString()}
                                </Text>
                            </Box>
                        )}

                        {willInfo.canTransferNow && (
                            <Box width="100%">
                                <Text fontSize="lg" fontWeight="bold" textAlign="center" color="green.500" mb={4}>
                                    üéâ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞!
                                </Text>
                                
                                <Button
                                    colorScheme="green"
                                    size="xl"
                                    width="100%"
                                    py={6}
                                    onClick={executeTransfer}
                                    isLoading={transferLoading}
                                    leftIcon={<Icon as={FaEthereum} />}
                                    fontSize="lg"
                                    fontWeight="bold"
                                    borderRadius="xl"
                                    loadingText="–ü–µ—Ä–µ–≤–æ–¥..."
                                    _hover={{
                                        transform: "translateY(-2px)",
                                        boxShadow: "xl"
                                    }}
                                    isDisabled={Number(willInfo.balance) < Number(willInfo.transferAmount)}
                                >
                                    üí∞ –ü–æ–ª—É—á–∏—Ç—å {ethers.formatEther(willInfo.transferAmount)} ETH
                                </Button>

                                {Number(willInfo.balance) < Number(willInfo.transferAmount) && (
                                    <Alert status="warning" borderRadius="lg" mt={4}>
                                        <AlertIcon />
                                        <AlertDescription>
                                            –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∑–∞–≤–µ—â–∞–Ω–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                                        </AlertDescription>
                                    </Alert>
                                )}
                            </Box>
                        )}

                        <Divider />

                        <Alert status="info" borderRadius="lg">
                            <AlertIcon />
                            <Box>
                                <AlertTitle>‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞</AlertTitle>
                                <AlertDescription fontSize="sm">
                                    <VStack align="start" spacing={1}>
                                        <Text>‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</Text>
                                        <Text>‚Ä¢ –ï—Å–ª–∏ –æ–Ω –Ω–µ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ–≥–æ {Math.floor(Number(willInfo.willActivateWaitingPeriod) / 60)} –º–∏–Ω—É—Ç - —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º</Text>
                                        <Text>‚Ä¢ –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã</Text>
                                        <Text>‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∫–∞–∂–¥—ã–µ {Math.floor(Number(willInfo.transferFrequency) / 60)} –º–∏–Ω—É—Ç</Text>
                                        <Text>‚Ä¢ –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–Ω–æ–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –∂–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥</Text>
                                    </VStack>
                                </AlertDescription>
                            </Box>
                        </Alert>
                    </VStack>
                </CardBody>
            </Card>

            {/* –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö */}
            <Box textAlign="center">
                <Button
                    variant="outline"
                    onClick={loadWillInfo}
                    isLoading={loading}
                    leftIcon={<Icon as={FaShieldAlt} />}
                >
                    –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                </Button>
            </Box>
        </VStack>
    );
} 