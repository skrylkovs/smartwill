import { useState, useEffect, forwardRef, useImperativeHandle } from "react";
import { ethers } from "ethers";
import {
    Box,
    Button,
    Text,
    VStack,
    Heading,
    Spinner,
    HStack,
    Flex,
    useToast,
    Divider,
    Center,
    Icon,
    useColorModeValue,
    Badge,
    Card,
    CardBody,
    CardHeader,
    SimpleGrid,
    Stat,
    StatLabel,
    StatNumber,
    StatHelpText,
    Alert,
    AlertIcon,
    AlertDescription
} from "@chakra-ui/react";
import { RepeatIcon } from "@chakra-ui/icons";
import { FaWallet, FaUser, FaEthereum, FaClock, FaHeartbeat, FaFileContract } from "react-icons/fa";
import SmartWillAbi from "../contracts/SmartWill.json";
import factoryAbi from "../contracts/SmartWillFactory.json";
import DiagnosticInfo from "./DiagnosticInfo";

interface MyWillsProps {
    signer: ethers.Signer;
    factoryAddress: string;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export interface WillInfo {
    address: string;
    balance: string;
    heir: string;
    heirName: string;
    heirRole: string;
    transferAmount: string;
    transferFrequency: string;
    waitingPeriod: string;
    limit: string;
}

// –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ forwardRef –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã —á–µ—Ä–µ–∑ useImperativeHandle
const MyWills = forwardRef(({ signer, factoryAddress }: MyWillsProps, ref) => {
    const [wills, setWills] = useState<WillInfo[]>([]);
    const [lastPing, setLastPing] = useState<string>("–ó–∞–≥—Ä—É–∑–∫–∞...");
    const [loading, setLoading] = useState(false);
    const [pingLoading, setPingLoading] = useState(false);
    const toast = useToast();

    const cardBg = useColorModeValue('white', 'gray.800');
    const textColor = useColorModeValue('gray.600', 'gray.300');
    const borderColor = useColorModeValue('gray.200', 'gray.600');

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    const formatTime = (seconds: number): string => {
        if (seconds < 60) return `${seconds} —Å–µ–∫.`;
        if (seconds < 3600) {
            const minutes = Math.floor(seconds / 60);
            return `${minutes} –º–∏–Ω.`;
        }
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        if (minutes === 0) return `${hours} —á.`;
        return `${hours} —á. ${minutes} –º–∏–Ω.`;
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—â–∞–Ω–∏–∏
    const fetchWillInfo = async (willAddress: string, retryCount = 3, delayMs = 1000) => {
        try {
            const contract = new ethers.Contract(willAddress, SmartWillAbi.abi, signer);

            // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∑–∞–≤–µ—â–∞–Ω–∏—è
            const [balance, heir, heirName, heirRole, transferAmount, transferFrequency, waitingPeriod, limit] = await Promise.all([
                contract.getBalance(),
                contract.heir(),
                contract.heirName(),
                contract.heirRole(),
                contract.transferAmount(),
                contract.transferFrequency(),
                contract.willActivateWaitingPeriod(),
                contract.limit()
            ]);

            return {
                address: willAddress,
                balance: ethers.formatEther(balance),
                heir,
                heirName,
                heirRole,
                transferAmount: ethers.formatEther(transferAmount),
                transferFrequency: transferFrequency.toString(),
                waitingPeriod: waitingPeriod.toString(),
                limit: ethers.formatEther(limit)
            };
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—â–∞–Ω–∏–∏ ${willAddress}:`, error);

            // –ï—Å–ª–∏ —É –Ω–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏, –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            if (retryCount > 0) {
                console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${retryCount}) –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ${willAddress} —á–µ—Ä–µ–∑ ${delayMs}–º—Å...`);

                // –û–∂–∏–¥–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                await new Promise(resolve => setTimeout(resolve, delayMs));

                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º –ø–æ–ø—ã—Ç–æ–∫
                return fetchWillInfo(willAddress, retryCount - 1, delayMs * 1.5);
            }

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏
            return {
                address: willAddress,
                balance: "–ó–∞–≥—Ä—É–∑–∫–∞...",
                heir: "–ó–∞–≥—Ä—É–∑–∫–∞...",
                heirName: "–ó–∞–≥—Ä—É–∑–∫–∞...",
                heirRole: "–ó–∞–≥—Ä—É–∑–∫–∞...",
                transferAmount: "–ó–∞–≥—Ä—É–∑–∫–∞...",
                transferFrequency: "–ó–∞–≥—Ä—É–∑–∫–∞...",
                waitingPeriod: "–ó–∞–≥—Ä—É–∑–∫–∞...",
                limit: "–ó–∞–≥—Ä—É–∑–∫–∞..."
            };
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞ –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏
    const fetchLastPing = async () => {
        try {
            if (!signer) return;

            const factory = new ethers.Contract(factoryAddress, factoryAbi.abi, signer);
            const signerAddress = await signer.getAddress();

            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∏–Ω–≥ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å getLastPing()
                try {
                    const lastPingTimestamp = await factory.getLastPing();

                    if (lastPingTimestamp > 0) {
                        setLastPing(new Date(Number(lastPingTimestamp) * 1000).toLocaleString());
                        return;
                    }
                } catch (error) {
                    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å lastPing —á–µ—Ä–µ–∑ getLastPing():", error);
                }

                // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ lastPings
                try {
                    const lastPingTimestamp = await factory.lastPings(signerAddress);

                    if (lastPingTimestamp > 0) {
                        setLastPing(new Date(Number(lastPingTimestamp) * 1000).toLocaleString());
                        return;
                    }
                } catch (error) {
                    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å lastPing —á–µ—Ä–µ–∑ lastPings:", error);
                }

                // –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ getLastPingOf, –µ—Å–ª–∏ –æ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
                try {
                    const lastPingTimestamp = await factory.getLastPingOf(signerAddress);

                    if (lastPingTimestamp > 0) {
                        setLastPing(new Date(Number(lastPingTimestamp) * 1000).toLocaleString());
                        return;
                    }
                } catch (error) {
                    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å lastPing —á–µ—Ä–µ–∑ getLastPingOf:", error);
                }

                setLastPing("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–∏–Ω–≥–µ");
            } catch (error) {
                console.error("–í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è lastPing –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏:", error);
                setLastPing("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–∏–Ω–≥–µ:", error);
            setLastPing("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
        }
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏–Ω–≥ –≤ —Ñ–∞–±—Ä–∏–∫—É
    const handlePingAll = async () => {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å
            const provider = signer.provider as ethers.BrowserProvider;
            const network = await provider.getNetwork();
            const chainId = Number(network.chainId);

            // ID —Å–µ—Ç–∏ Arbitrum Sepolia: 421614
            if (chainId !== 421614) {
                throw new Error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Å–µ—Ç—å Arbitrum Sepolia –≤ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ");
            }

            setPingLoading(true);
            const factory = new ethers.Contract(factoryAddress, factoryAbi.abi, signer);

            console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ping...");

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –ø–∏–Ω–≥ –≤ —Ñ–∞–±—Ä–∏–∫—É
            const pingTx = await factory.ping();
            console.log("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ping...");

            // –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await pingTx.wait();
            console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ping –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:", pingTx.hash);

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
            console.log("‚è≥ –û–∂–∏–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ...");
            await new Promise(resolve => setTimeout(resolve, 2000));

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–∏–Ω–≥–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            let pingUpdated = false;
            for (let attempt = 1; attempt <= 3; attempt++) {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ ping...`);
                await fetchLastPing();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–∏–ª–æ—Å—å –ª–∏ –≤—Ä–µ–º—è (–ø—Ä–∏–º–µ—Ä–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∏–Ω—É—Ç)
                const currentTime = new Date();
                const fiveMinutesAgo = new Date(currentTime.getTime() - 5 * 60 * 1000);

                // –ï—Å–ª–∏ lastPing —Å–æ–¥–µ—Ä–∂–∏—Ç "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" –∏–ª–∏ "–û—à–∏–±–∫–∞", –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                if (!lastPing.includes("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö") && !lastPing.includes("–û—à–∏–±–∫–∞")) {
                    try {
                        const lastPingDate = new Date(lastPing);
                        if (lastPingDate > fiveMinutesAgo) {
                            console.log("‚úÖ –í—Ä–µ–º—è ping —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
                            pingUpdated = true;
                            break;
                        }
                    } catch (dateError) {
                        console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...");
                    }
                }

                if (attempt < 3) {
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }

            if (!pingUpdated) {
                console.log("‚ö†Ô∏è –í—Ä–µ–º—è ping –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
            }

            toast({
                title: "–£—Å–ø–µ—à–Ω–æ!",
                description: `–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, —á—Ç–æ –∂–∏–≤—ã. –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.`,
                status: "success",
                duration: 5000,
                isClosable: true,
            });

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏–Ω–≥–∞:", error);
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã –∂–∏–≤—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.",
                status: "error",
                duration: 5000,
                isClosable: true,
            });
        } finally {
            setPingLoading(false);
        }
    };

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—â–∞–Ω–∏–π
    const loadWills = async () => {
        try {
            setLoading(true);
            const factory = new ethers.Contract(factoryAddress, factoryAbi.abi, signer);
            const userAddress = await signer.getAddress();

            console.log("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—â–∞–Ω–∏–π:");
            console.log("üë§ –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userAddress);
            console.log("üè≠ –ê–¥—Ä–µ—Å —Ñ–∞–±—Ä–∏–∫–∏:", factoryAddress);

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—â–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            let willsList = [];
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ getMyWills()
                willsList = await factory.getMyWills();
                console.log("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—â–∞–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", willsList.length);
                console.log("üìÑ –ê–¥—Ä–µ—Å–∞ –∑–∞–≤–µ—â–∞–Ω–∏–π:", willsList);
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ getMyWills:", error);
                // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                willsList = [];
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—â–∞–Ω–∏–π
            try {
                const allWills = await factory.getDeployedWills();
                console.log("üìä –í—Å–µ–≥–æ –∑–∞–≤–µ—â–∞–Ω–∏–π –≤ —Ñ–∞–±—Ä–∏–∫–µ:", allWills.length);
                console.log("üîó –ê–¥—Ä–µ—Å–∞ –≤—Å–µ—Ö –∑–∞–≤–µ—â–∞–Ω–∏–π:", allWills);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º mapping –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try {
                    const userWillsFromMapping = await factory.ownerToWills(userAddress, 0);
                    console.log("üóÇÔ∏è –ü–µ—Ä–≤–æ–µ –∑–∞–≤–µ—â–∞–Ω–∏–µ –∏–∑ mapping:", userWillsFromMapping);
                } catch (mappingError) {
                    console.log("üìù Mapping –ø—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∑–∞–≤–µ—â–∞–Ω–∏–π –Ω–µ—Ç)");
                }
            } catch (debugError) {
                console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", debugError);
            }

            // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—â–∞–Ω–∏–π –ø—É—Å—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
            if (willsList.length === 0) {
                console.log("‚ùå –ó–∞–≤–µ—â–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                setWills([]);
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—â–∞–Ω–∏—è—Ö,
            // —á—Ç–æ–±—ã –¥–∞—Ç—å –±–ª–æ–∫—á–µ–π–Ω—É –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            await new Promise(resolve => setTimeout(resolve, 1000));

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–≤–µ—â–∞–Ω–∏–∏
            const willsInfo = await Promise.all(
                willsList.map((address: string) => fetchWillInfo(address))
            );

            // –¢–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—â–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const validWills = willsInfo.filter(Boolean) as WillInfo[];
            console.log("‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–≤–µ—â–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", validWills.length);

            setWills(validWills);

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–∏–Ω–≥–µ
            await fetchLastPing();

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            setTimeout(async () => {
                await fetchLastPing();
            }, 1000);
        } catch (error) {
            console.error("üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–≤–µ—â–∞–Ω–∏–π:", error);
        } finally {
            setLoading(false);
        }
    };

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã —á–µ—Ä–µ–∑ ref
    useImperativeHandle(ref, () => ({
        loadWills,
        refreshWills: () => {
            if (signer) {
                loadWills();
                toast({
                    title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                    description: "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ—â–∞–Ω–∏—è—Ö...",
                    status: "info",
                    duration: 2000,
                    isClosable: true
                });
            }
        }
    }));

    // –•—É–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        if (signer) {
            loadWills();
        }
    }, [signer]);

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const refreshWills = () => {
        if (signer) {
            loadWills();
            toast({
                title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                description: "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ—â–∞–Ω–∏—è—Ö...",
                status: "info",
                duration: 2000,
                isClosable: true
            });
        }
    };

    return (
        <VStack spacing={8} align="stretch" w="100%">
            {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <DiagnosticInfo signer={signer} factoryAddress={factoryAddress} />

            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
            <Flex justifyContent="space-between" alignItems="center">
                <HStack spacing={3}>
                    <Icon as={FaFileContract} boxSize={6} color="#081781" />
                    <Heading size="lg" bgGradient="linear(to-r, #081781, #061264)" bgClip="text">
                        –ú–æ–∏ –∑–∞–≤–µ—â–∞–Ω–∏—è
                    </Heading>
                </HStack>
                <Button
                    size="md"
                    onClick={refreshWills}
                    leftIcon={<Icon as={RepeatIcon} />}
                    isLoading={loading}
                    colorScheme="purple"
                    variant="outline"
                    borderRadius="lg"
                    borderColor="#081781"
                    color="#081781"
                    _hover={{
                        bg: "transparent",
                        transform: "translateY(-1px)",
                        bgGradient: "linear(to-r, #081781, #061264)",
                        color: "white",
                        borderColor: "transparent"
                    }}
                    transition="all 0.2s"
                >
                    –û–±–Ω–æ–≤–∏—Ç—å
                </Button>
            </Flex>

            {loading ? (
                <Center p={16}>
                    <VStack spacing={6}>
                        <Spinner size="xl" color="#081781" thickness="4px" speed="0.8s" />
                        <Text fontSize="lg" color={textColor} fontWeight="medium">
                            –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—â–∞–Ω–∏–π...
                        </Text>
                    </VStack>
                </Center>
            ) : wills.length === 0 ? (
                <Box py={16} textAlign="center">
                    <VStack spacing={6}>
                        <Icon as={FaFileContract} boxSize={16} color="gray.300" />
                        <VStack spacing={2}>
                            <Heading size="md" color={textColor}>
                                –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—â–∞–Ω–∏–π
                            </Heading>
                            <Text fontSize="lg" color={textColor}>
                                –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–≤–µ—â–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏
                            </Text>
                        </VStack>
                    </VStack>
                </Box>
            ) : (
                <>
                    {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                    <SimpleGrid columns={{ base: 1, md: 3 }} spacing={6}>
                        <Card bg={cardBg} borderRadius="xl" boxShadow="lg">
                            <CardBody>
                                <Stat>
                                    <StatLabel color={textColor}>–í—Å–µ–≥–æ –∑–∞–≤–µ—â–∞–Ω–∏–π</StatLabel>
                                    <StatNumber color="#081781">{wills.length}</StatNumber>
                                    <StatHelpText>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤</StatHelpText>
                                </Stat>
                            </CardBody>
                        </Card>

                        <Card bg={cardBg} borderRadius="xl" boxShadow="lg">
                            <CardBody>
                                <Stat>
                                    <StatLabel color={textColor}>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</StatLabel>
                                    <StatNumber color="green.500">
                                        {wills.reduce((sum, will) => sum + parseFloat(will.balance || '0'), 0).toFixed(4)} ETH
                                    </StatNumber>
                                    <StatHelpText>–í–æ –≤—Å–µ—Ö –∑–∞–≤–µ—â–∞–Ω–∏—è—Ö</StatHelpText>
                                </Stat>
                            </CardBody>
                        </Card>

                        <Card bg={cardBg} borderRadius="xl" boxShadow="lg">
                            <CardBody>
                                <Stat>
                                    <StatLabel color={textColor}>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</StatLabel>
                                    <StatNumber fontSize="md" color="blue.500">
                                        {lastPing}
                                    </StatNumber>
                                    <StatHelpText>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∂–∏–∑–Ω–∏</StatHelpText>
                                </Stat>
                            </CardBody>
                        </Card>
                    </SimpleGrid>

                    {/* –°–ø–∏—Å–æ–∫ –∑–∞–≤–µ—â–∞–Ω–∏–π */}
                    <VStack spacing={6} align="stretch">
                        {wills.map((will, index) => (
                            <Card
                                key={will.address}
                                bg={cardBg}
                                borderRadius="xl"
                                boxShadow="lg"
                                border="1px solid"
                                borderColor={borderColor}
                                transition="all 0.3s cubic-bezier(0.4, 0, 0.2, 1)"
                                _hover={{
                                    transform: "translateY(-2px)",
                                    boxShadow: "xl",
                                    borderColor: "#081781"
                                }}
                            >
                                <CardHeader pb={2}>
                                    <HStack justify="space-between">
                                        <HStack spacing={3}>
                                            <Icon as={FaUser} color="blue.500" boxSize={5} />
                                            <VStack align="start" spacing={0}>
                                                <Heading size="md" color="#081781">
                                                    {will.heirName}
                                                </Heading>
                                                <Badge colorScheme="blue" variant="subtle" borderRadius="md">
                                                    {will.heirRole}
                                                </Badge>
                                            </VStack>
                                        </HStack>
                                        <Badge colorScheme="green" variant="outline" fontSize="sm" px={3} py={1}>
                                            –ó–∞–≤–µ—â–∞–Ω–∏–µ #{index + 1}
                                        </Badge>
                                    </HStack>
                                </CardHeader>

                                <CardBody pt={2}>
                                    <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>
                                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ */}
                                        <VStack align="start" spacing={3}>
                                            <HStack>
                                                <Icon as={FaWallet} color="gray.500" />
                                                <Text fontSize="sm" fontWeight="semibold" color={textColor}>
                                                    –ö–æ—à–µ–ª–µ–∫ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞
                                                </Text>
                                            </HStack>
                                            <Text fontSize="sm" fontFamily="monospace" color="blue.500">
                                                {`${will.heir.slice(0, 6)}...${will.heir.slice(-4)}`}
                                            </Text>
                                        </VStack>

                                        {/* –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                                        <VStack align="start" spacing={3}>
                                            <HStack>
                                                <Icon as={FaEthereum} color="gray.500" />
                                                <Text fontSize="sm" fontWeight="semibold" color={textColor}>
                                                    –§–∏–Ω–∞–Ω—Å—ã
                                                </Text>
                                            </HStack>
                                            <VStack align="start" spacing={1}>
                                                <Text fontSize="sm">
                                                    <strong>–ë–∞–ª–∞–Ω—Å:</strong> {will.balance} ETH
                                                </Text>
                                                <Text fontSize="sm">
                                                    <strong>–ü–µ—Ä–µ–≤–æ–¥:</strong> {will.transferAmount} ETH
                                                </Text>
                                                <Text fontSize="sm">
                                                    <strong>–õ–∏–º–∏—Ç:</strong> {will.limit} ETH
                                                </Text>
                                            </VStack>
                                        </VStack>

                                        {/* –í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                                        <VStack align="start" spacing={3}>
                                            <HStack>
                                                <Icon as={FaClock} color="gray.500" />
                                                <Text fontSize="sm" fontWeight="semibold" color={textColor}>
                                                    –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                                                </Text>
                                            </HStack>
                                            <VStack align="start" spacing={1}>
                                                <Text fontSize="sm">
                                                    <strong>–ß–∞—Å—Ç–æ—Ç–∞ –≤—ã–ø–ª–∞—Ç:</strong>{" "}
                                                    <Badge colorScheme="orange" variant="subtle" borderRadius="md">
                                                        {formatTime(Number(will.transferFrequency))}
                                                    </Badge>
                                                </Text>
                                                <Text fontSize="sm">
                                                    <strong>–ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è:</strong>{" "}
                                                    <Badge colorScheme="purple" variant="subtle" borderRadius="md">
                                                        {formatTime(Number(will.waitingPeriod))}
                                                    </Badge>
                                                </Text>
                                            </VStack>
                                        </VStack>
                                    </SimpleGrid>

                                    <Divider my={4} />

                                    <Box p={3} bg={useColorModeValue('gray.50', 'gray.700')} borderRadius="lg">
                                        <Text fontSize="xs" color={textColor} fontFamily="monospace">
                                            <strong>–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:</strong> {will.address}
                                        </Text>
                                    </Box>
                                </CardBody>
                            </Card>
                        ))}
                    </VStack>

                    {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∂–∏–∑–Ω–∏ */}
                    <Card
                        bg={useColorModeValue('blue.50', 'blue.900')}
                        borderRadius="xl"
                        border="2px solid"
                        borderColor="blue.200"
                        boxShadow="lg"
                    >
                        <CardBody>
                            <VStack spacing={6}>
                                <VStack spacing={2} textAlign="center">
                                    <HStack>
                                        <Icon as={FaHeartbeat} color="red.500" boxSize={6} />
                                        <Heading size="md" color="#081781">
                                            –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                                        </Heading>
                                    </HStack>
                                    <Text color={textColor} fontSize="sm" maxW="500px">
                                        –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—â–∞–Ω–∏—è –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å –ø–æ–¥ –≤–∞—à–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
                                    </Text>
                                </VStack>

                                <Button
                                    onClick={handlePingAll}
                                    colorScheme="blue"
                                    size="lg"
                                    isLoading={pingLoading}
                                    loadingText="–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è..."
                                    width={{ base: "100%", md: "auto" }}
                                    px={12}
                                    py={6}
                                    fontSize="lg"
                                    fontWeight="bold"
                                    leftIcon={<Icon as={FaHeartbeat} />}
                                    bgGradient="linear(to-r, #081781, #061264)"
                                    color="white"
                                    _hover={{
                                        bgGradient: "linear(to-r, #061264, #040d47)",
                                        transform: "translateY(-2px)",
                                        boxShadow: "xl"
                                    }}
                                    _active={{ transform: "translateY(0)" }}
                                    transition="all 0.2s cubic-bezier(0.4, 0, 0.2, 1)"
                                    borderRadius="xl"
                                >
                                    –Ø –∂–∏–≤ –∏ –∑–¥–æ—Ä–æ–≤!
                                </Button>

                                <Alert status="info" borderRadius="lg" variant="subtle">
                                    <AlertIcon />
                                    <AlertDescription fontSize="sm">
                                        –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: <strong>{lastPing}</strong>
                                    </AlertDescription>
                                </Alert>
                            </VStack>
                        </CardBody>
                    </Card>
                </>
            )}
        </VStack>
    );
});

export default MyWills;
