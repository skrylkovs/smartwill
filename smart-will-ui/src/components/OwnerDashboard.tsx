import { useState, useEffect } from "react";
import {
    Box,
    Button,
    VStack,
    HStack,
    Text,
    Alert,
    AlertIcon,
    AlertTitle,
    AlertDescription,
    Heading,
    useColorModeValue,
    Icon,
    Badge,
    useToast,
    Card,
    CardBody,
    CardHeader,
    Progress
} from "@chakra-ui/react";
import { FaHeart, FaClock, FaEthereum, FaUser, FaShieldAlt, FaCheck } from "react-icons/fa";
import { ethers } from "ethers";
import smartWillAbi from "../contracts/SmartWill.json";

interface Props {
    signer: ethers.Signer;
    willAddress: string;
}

interface WillInfo {
    owner: string;
    heir: string;
    heirName: string;
    heirRole: string;
    transferAmount: bigint;
    balance: bigint;
    isOwnerActive: boolean;
    lastActivity: bigint;
    willActivateWaitingPeriod: bigint;
    transferFrequency: bigint;
    nextPossibleTransferTime: bigint;
}

export default function OwnerDashboard({ signer, willAddress }: Props) {
    const [willInfo, setWillInfo] = useState<WillInfo | null>(null);
    const [loading, setLoading] = useState(false);
    const [confirmLoading, setConfirmLoading] = useState(false);
    const [timeUntilInactive, setTimeUntilInactive] = useState<number>(0);
    const [countdown, setCountdown] = useState<string>("");

    const toast = useToast();
    const cardBg = useColorModeValue('white', 'gray.800');
    const textColor = useColorModeValue('gray.600', 'gray.300');

    const loadWillInfo = async () => {
        try {
            setLoading(true);
            const will = new ethers.Contract(willAddress, smartWillAbi.abi, signer);
            
            const [
                owner,
                heir,
                heirName,
                heirRole,
                transferAmount,
                balance,
                isOwnerActive,
                lastActivity,
                willActivateWaitingPeriod,
                transferFrequency,
                nextPossibleTransferTime
            ] = await Promise.all([
                will.owner(),
                will.heir(),
                will.heirName(),
                will.heirRole(),
                will.transferAmount(),
                will.getBalance(),
                will.isOwnerActive(),
                will.lastActivity(),
                will.willActivateWaitingPeriod(),
                will.transferFrequency(),
                will.getNextPossibleTransferTime()
            ]);

            setWillInfo({
                owner,
                heir,
                heirName,
                heirRole,
                transferAmount,
                balance,
                isOwnerActive,
                lastActivity,
                willActivateWaitingPeriod,
                transferFrequency,
                nextPossibleTransferTime
            });

        } catch (error: any) {
            toast({
                title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
                description: error.message,
                status: "error",
                duration: 5000
            });
        } finally {
            setLoading(false);
        }
    };

    const calculateTimeUntilInactive = () => {
        if (!willInfo) return;

        const currentTime = Math.floor(Date.now() / 1000);
        const inactiveTime = Number(willInfo.lastActivity) + Number(willInfo.willActivateWaitingPeriod);
        const timeLeft = inactiveTime - currentTime;

        setTimeUntilInactive(timeLeft);

        if (timeLeft > 0) {
            const hours = Math.floor(timeLeft / 3600);
            const minutes = Math.floor((timeLeft % 3600) / 60);
            const seconds = timeLeft % 60;
            
            if (hours > 0) {
                setCountdown(`${hours}—á ${minutes}–º ${seconds}—Å`);
            } else if (minutes > 0) {
                setCountdown(`${minutes}–º ${seconds}—Å`);
            } else {
                setCountdown(`${seconds}—Å`);
            }
        } else {
            setCountdown("–ù–µ–∞–∫—Ç–∏–≤–µ–Ω!");
        }
    };

    const confirmActivity = async () => {
        if (!willInfo) return;

        try {
            setConfirmLoading(true);
            const will = new ethers.Contract(willAddress, smartWillAbi.abi, signer);
            
            const tx = await will.confirmActivity();
            
            toast({
                title: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                description: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...",
                status: "info",
                duration: 3000
            });

            await tx.wait();
            
            toast({
                title: "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!",
                description: "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, —á—Ç–æ –∂–∏–≤—ã –∏ –∑–¥–æ—Ä–æ–≤—ã",
                status: "success",
                duration: 5000
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            loadWillInfo();

        } catch (error: any) {
            toast({
                title: "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                description: error.message,
                status: "error",
                duration: 5000
            });
        } finally {
            setConfirmLoading(false);
        }
    };

    useEffect(() => {
        loadWillInfo();
    }, [willAddress]);

    useEffect(() => {
        if (willInfo) {
            calculateTimeUntilInactive();
            const interval = setInterval(calculateTimeUntilInactive, 1000);
            return () => clearInterval(interval);
        }
    }, [willInfo]);

    if (loading) {
        return (
            <Box textAlign="center" py={10}>
                <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—â–∞–Ω–∏–∏...</Text>
            </Box>
        );
    }

    if (!willInfo) {
        return (
            <Alert status="error">
                <AlertIcon />
                <AlertTitle>–û—à–∏–±–∫–∞!</AlertTitle>
                <AlertDescription>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—â–∞–Ω–∏–∏</AlertDescription>
            </Alert>
        );
    }

    const progressValue = timeUntilInactive > 0 
        ? (timeUntilInactive / Number(willInfo.willActivateWaitingPeriod)) * 100
        : 0;

    return (
        <VStack spacing={6} align="stretch">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <Card bg={cardBg}>
                <CardHeader>
                    <HStack>
                        <Icon as={FaShieldAlt} color="blue.500" boxSize={6} />
                        <VStack align="start" spacing={0}>
                            <Heading size="lg">–ú–æ–µ –∑–∞–≤–µ—â–∞–Ω–∏–µ</Heading>
                            <Text color={textColor}>
                                –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {willAddress.slice(0, 6)}...{willAddress.slice(-4)}
                            </Text>
                        </VStack>
                    </HStack>
                </CardHeader>
            </Card>

            {/* –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
            <Card bg={cardBg}>
                <CardBody>
                    <VStack spacing={4}>
                        <HStack justify="space-between" width="100%">
                            <HStack>
                                <Icon as={FaUser} color="green.500" />
                                <Text fontWeight="semibold">–í–∞—à —Å—Ç–∞—Ç—É—Å</Text>
                            </HStack>
                            <Badge 
                                colorScheme={willInfo.isOwnerActive ? "green" : "red"} 
                                size="lg"
                                px={3}
                                py={1}
                            >
                                {willInfo.isOwnerActive ? "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" : "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
                            </Badge>
                        </HStack>

                        <Box width="100%">
                            <HStack justify="space-between" mb={2}>
                                <Text fontSize="sm" color={textColor}>–í—Ä–µ–º—è –¥–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</Text>
                                <Text fontSize="sm" fontWeight="semibold" color={timeUntilInactive <= 0 ? "red.500" : "green.500"}>
                                    {countdown}
                                </Text>
                            </HStack>
                            <Progress 
                                value={progressValue} 
                                colorScheme={timeUntilInactive <= 0 ? "red" : "green"}
                                size="lg"
                                borderRadius="lg"
                            />
                        </Box>

                        <Text fontSize="sm" color={textColor} textAlign="center">
                            –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {new Date(Number(willInfo.lastActivity) * 1000).toLocaleString()}
                        </Text>

                        {!willInfo.isOwnerActive && (
                            <Alert status="error" borderRadius="lg">
                                <AlertIcon />
                                <Box>
                                    <AlertTitle>‚ö†Ô∏è –í—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã!</AlertTitle>
                                    <AlertDescription>
                                        –ù–∞—Å–ª–µ–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!
                                    </AlertDescription>
                                </Box>
                            </Alert>
                        )}

                        {willInfo.isOwnerActive && timeUntilInactive < 3600 && (
                            <Alert status="warning" borderRadius="lg">
                                <AlertIcon />
                                <Box>
                                    <AlertTitle>‚è∞ –°–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã!</AlertTitle>
                                    <AlertDescription>
                                        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ {countdown}, –∏–Ω–∞—á–µ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫ —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã.
                                    </AlertDescription>
                                </Box>
                            </Alert>
                        )}
                    </VStack>
                </CardBody>
            </Card>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ */}
            <Card bg={cardBg}>
                <CardBody>
                    <VStack spacing={4}>
                        <HStack justify="space-between" width="100%">
                            <HStack>
                                <Icon as={FaHeart} color="red.500" />
                                <Text fontWeight="semibold">–ù–∞—Å–ª–µ–¥–Ω–∏–∫</Text>
                            </HStack>
                        </HStack>

                        <VStack spacing={2} align="stretch">
                            <HStack justify="space-between">
                                <Text color={textColor}>–ò–º—è:</Text>
                                <Text fontWeight="semibold">{willInfo.heirName}</Text>
                            </HStack>
                            <HStack justify="space-between">
                                <Text color={textColor}>–†–æ–ª—å:</Text>
                                <Text fontWeight="semibold">{willInfo.heirRole}</Text>
                            </HStack>
                            <HStack justify="space-between">
                                <Text color={textColor}>–ê–¥—Ä–µ—Å:</Text>
                                <Text fontFamily="monospace" fontSize="sm">
                                    {willInfo.heir.slice(0, 6)}...{willInfo.heir.slice(-4)}
                                </Text>
                            </HStack>
                        </VStack>
                    </VStack>
                </CardBody>
            </Card>

            {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–ø–ª–∞—Ç */}
            <Card bg={cardBg}>
                <CardBody>
                    <VStack spacing={4}>
                        <HStack justify="space-between" width="100%">
                            <HStack>
                                <Icon as={FaEthereum} color="green.500" />
                                <Text fontWeight="semibold">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–ø–ª–∞—Ç</Text>
                            </HStack>
                        </HStack>

                        <VStack spacing={2} align="stretch">
                            <HStack justify="space-between">
                                <Text color={textColor}>–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã:</Text>
                                <Text fontWeight="semibold">{ethers.formatEther(willInfo.transferAmount)} ETH</Text>
                            </HStack>
                            <HStack justify="space-between">
                                <Text color={textColor}>–ß–∞—Å—Ç–æ—Ç–∞:</Text>
                                <Text fontWeight="semibold">–ö–∞–∂–¥—ã–µ {Math.floor(Number(willInfo.transferFrequency) / 60)} –º–∏–Ω—É—Ç</Text>
                            </HStack>
                            <HStack justify="space-between">
                                <Text color={textColor}>–ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è:</Text>
                                <Text fontWeight="semibold">{Math.floor(Number(willInfo.willActivateWaitingPeriod) / 60)} –º–∏–Ω—É—Ç</Text>
                            </HStack>
                            <HStack justify="space-between">
                                <Text color={textColor}>–ë–∞–ª–∞–Ω—Å:</Text>
                                <Text fontWeight="semibold" color="green.500">{ethers.formatEther(willInfo.balance)} ETH</Text>
                            </HStack>
                        </VStack>
                    </VStack>
                </CardBody>
            </Card>

            {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
            <Card bg={cardBg}>
                <CardBody>
                    <VStack spacing={4}>
                        <Button
                            colorScheme="green"
                            size="xl"
                            width="100%"
                            py={6}
                            onClick={confirmActivity}
                            isLoading={confirmLoading}
                            leftIcon={<Icon as={FaCheck} />}
                            fontSize="lg"
                            fontWeight="bold"
                            borderRadius="xl"
                            loadingText="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ..."
                            _hover={{
                                transform: "translateY(-2px)",
                                boxShadow: "xl"
                            }}
                        >
                            üíö –Ø –∂–∏–≤ –∏ –∑–¥–æ—Ä–æ–≤!
                        </Button>

                        <Text textAlign="center" color={textColor} fontSize="sm">
                            –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –Ω–∞—Å–ª–µ–¥–Ω–∏–∫ –Ω–µ –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞
                        </Text>

                        <Alert status="info" borderRadius="lg">
                            <AlertIcon />
                            <Box>
                                <AlertTitle>‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</AlertTitle>
                                <AlertDescription>
                                    –ö–æ–≥–¥–∞ –≤—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É, –ø–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è. 
                                    –ù–∞—Å–ª–µ–¥–Ω–∏–∫ —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 
                                    –≤ —Ç–µ—á–µ–Ω–∏–µ {Math.floor(Number(willInfo.willActivateWaitingPeriod) / 60)} –º–∏–Ω—É—Ç.
                                </AlertDescription>
                            </Box>
                        </Alert>
                    </VStack>
                </CardBody>
            </Card>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ */}
            {!willInfo.isOwnerActive && (
                <Card bg={cardBg} borderColor="red.500" borderWidth="2px">
                    <CardBody>
                        <VStack spacing={4}>
                            <HStack justify="space-between" width="100%">
                                <HStack>
                                    <Icon as={FaClock} color="red.500" />
                                    <Text fontWeight="semibold" color="red.500">–í–ù–ò–ú–ê–ù–ò–ï!</Text>
                                </HStack>
                            </HStack>

                            <Alert status="error" borderRadius="lg">
                                <AlertIcon />
                                <Box>
                                    <AlertTitle>–ù–∞—Å–ª–µ–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã!</AlertTitle>
                                    <AlertDescription>
                                        –°–ª–µ–¥—É—é—â–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {new Date(Number(willInfo.nextPossibleTransferTime) * 1000).toLocaleString()}
                                        <br />
                                        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã.
                                    </AlertDescription>
                                </Box>
                            </Alert>
                        </VStack>
                    </CardBody>
                </Card>
            )}

            {/* –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö */}
            <Box textAlign="center">
                <Button
                    variant="outline"
                    onClick={loadWillInfo}
                    isLoading={loading}
                    leftIcon={<Icon as={FaShieldAlt} />}
                >
                    –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                </Button>
            </Box>
        </VStack>
    );
} 