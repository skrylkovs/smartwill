import { useEffect, useState, useRef } from "react";
import { ethers } from "ethers";
import {
    Button,
    Container,
    Heading,
    Text,
    VStack,
    HStack,
    Box,
    Alert,
    AlertIcon,
    AlertTitle,
    AlertDescription
} from "@chakra-ui/react";
import CreateWillForm from "./components/CreateWillForm";
import MyWills from "./components/MyWills";
import DeployFactoryButton from "./components/DeployFactoryButton";
import factoryAbi from "./contracts/SmartWillFactory.json";

function App() {
    const [provider, setProvider] = useState<ethers.BrowserProvider | null>(null);
    const [signer, setSigner] = useState<ethers.Signer | null>(null);
    const [account, setAccount] = useState<string>("");
    const [showMyWills, setShowMyWills] = useState(false);
    const [factoryAddress, setFactoryAddress] = useState<string>("");
    const [network, setNetwork] = useState<{ chainId: number; name: string } | null>(null);
    const myWillsRef = useRef<any>(null);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å —Ñ–∞–±—Ä–∏–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    useEffect(() => {
        const savedAddress = localStorage.getItem("factoryAddress");
        if (savedAddress) {
            setFactoryAddress(savedAddress);
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –∞–¥—Ä–µ—Å —Ñ–∞–±—Ä–∏–∫–∏:', savedAddress);
        }
    }, []);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    useEffect(() => {
        const checkNetwork = async () => {
            if (!provider) return;
            try {
                const network = await provider.getNetwork();
                setNetwork({
                    chainId: Number(network.chainId),
                    name: network.name
                });
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏:", err);
            }
        };
        
        checkNetwork();
    }, [provider]);

    const connect = async () => {
        if (!window.ethereum) return alert("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask");
        const web3Provider = new ethers.BrowserProvider(window.ethereum);
        const signer = await web3Provider.getSigner();
        const address = await signer.getAddress();
        setProvider(web3Provider);
        setSigner(signer);
        setAccount(address);
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ—â–∞–Ω–∏—è
    const handleWillCreated = (willAddress: string) => {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ú–æ–∏ –∑–∞–≤–µ—â–∞–Ω–∏—è"
        setShowMyWills(true);
        
        // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
        setTimeout(() => {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç MyWills, –≤—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (myWillsRef.current && typeof myWillsRef.current.loadWills === 'function') {
                myWillsRef.current.loadWills();
            }
        }, 100);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–ø–ª–æ—è —Ñ–∞–±—Ä–∏–∫–∏
    const handleFactoryDeployed = (address: string) => {
        setFactoryAddress(address);
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–µ—Ç–∏ (Arbitrum Sepolia)
    const isCorrectNetwork = network && network.chainId === 421614;

    return (
        <Container py={6}>
            <VStack spacing={6}>
                <Heading>üíº SmartWill</Heading>
                
                <Alert status="info" borderRadius="md">
                    <AlertIcon />
                    <AlertDescription>
                        –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–µ—Ç–∏ <strong>Arbitrum Sepolia</strong>. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç—Ç–æ–π —Å–µ—Ç–∏.
                    </AlertDescription>
                </Alert>
                
                {!account ? (
                    <Button onClick={connect}>–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫</Button>
                ) : (
                    <>
                        <Text>–ö–æ—à–µ–ª–µ–∫: {account}</Text>
                        {network && !isCorrectNetwork && (
                            <Alert status="warning" borderRadius="md">
                                <AlertIcon />
                                <AlertTitle>–ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ—Ç—å!</AlertTitle>
                                <AlertDescription>
                                    –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Ç–∏ {network.name || `Chain ID: ${network.chainId}`}. 
                                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ Arbitrum Sepolia –≤ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ.
                                </AlertDescription>
                            </Alert>
                        )}
                        
                        {!factoryAddress ? (
                            <Box>
                                <Text mb={3}>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Ñ–∞–±—Ä–∏–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤</Text>
                                <DeployFactoryButton 
                                    signer={signer!} 
                                    onFactoryDeployed={handleFactoryDeployed} 
                                />
                            </Box>
                        ) : (
                            <>
                                <Text>–ê–¥—Ä–µ—Å —Ñ–∞–±—Ä–∏–∫–∏: {factoryAddress}</Text>
                                <HStack spacing={4}>
                                    <Button onClick={() => setShowMyWills(false)} colorScheme={!showMyWills ? "blue" : "gray"}>
                                        –°–æ–∑–¥–∞—Ç—å –∑–∞–≤–µ—â–∞–Ω–∏–µ
                                    </Button>
                                    <Button onClick={() => setShowMyWills(true)} colorScheme={showMyWills ? "blue" : "gray"}>
                                        –ú–æ–∏ –∑–∞–≤–µ—â–∞–Ω–∏—è
                                    </Button>
                                </HStack>
                                {showMyWills ? (
                                    <MyWills 
                                        signer={signer!} 
                                        ref={myWillsRef}
                                        factoryAddress={factoryAddress}
                                    />
                                ) : (
                                    <CreateWillForm 
                                        signer={signer!} 
                                        onWillCreated={handleWillCreated}
                                        factoryAddress={factoryAddress} 
                                    />
                                )}
                            </>
                        )}
                    </>
                )}
            </VStack>
        </Container>
    );
}

export default App;