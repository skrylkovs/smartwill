const { ethers } = require("hardhat");

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ - –∞–¥—Ä–µ—Å SmartWillFactory
const FACTORY_ADDRESS = "0xecd3348a4889021364b91528241fb676119d8a6a";

async function main() {
    const [signer] = await ethers.getSigners();
    console.log("üë§ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ checkAndTransfer –æ—Ç:", signer.address);
    console.log(`üîπ –ê–¥—Ä–µ—Å SmartWillFactory: ${FACTORY_ADDRESS}`);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ñ–∞–±—Ä–∏–∫–µ SmartWillFactory
    const Factory = await ethers.getContractFactory("SmartWillFactory");
    const factory = Factory.attach(FACTORY_ADDRESS);

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—â–∞–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        console.log("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≤–µ—â–∞–Ω–∏–π –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏...");
        const deployedWills = await factory.getDeployedWills();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—â–∞–Ω–∏–π: ${deployedWills.length}`);

        if (deployedWills.length === 0) {
            console.log("‚ÑπÔ∏è –ó–∞–≤–µ—â–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–±—Ä–∏–∫–µ");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–≤–µ—â–∞–Ω–∏–µ
        for (let i = 0; i < deployedWills.length; i++) {
            const willAddress = deployedWills[i];
            console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—â–∞–Ω–∏–µ ${i + 1}/${deployedWills.length}: ${willAddress}`);
            
            await checkAndTransferForWill(factory, willAddress);
        }

        console.log("\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–µ—â–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ—â–∞–Ω–∏–π:", error.message);
        throw error;
    }
}

async function checkAndTransferForWill(factory, willAddress) {
    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É SmartWill –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const SmartWill = await ethers.getContractFactory("SmartWill");
        const willContract = SmartWill.attach(willAddress);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—â–∞–Ω–∏–∏
        const owner = await willContract.owner();
        const heir = await willContract.heir();
        const heirName = await willContract.heirName();
        const transferAmount = await willContract.transferAmount();
        const balance = await ethers.provider.getBalance(willAddress);

        console.log(`   üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${owner}`);
        console.log(`   üéØ –ù–∞—Å–ª–µ–¥–Ω–∏–∫: ${heirName} (${heir})`);
        console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${ethers.formatEther(balance)} ETH`);
        console.log(`   üí∏ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${ethers.formatEther(transferAmount)} ETH`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        if (balance < transferAmount) {
            console.log(`   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞`);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        const lastPing = await factory.getLastPingOf(owner);
        const willActivateWaitingPeriod = await willContract.willActivateWaitingPeriod();
        const currentTime = Math.floor(Date.now() / 1000);
        const timeSinceLastPing = currentTime - Number(lastPing);
        const timeToActivation = Number(willActivateWaitingPeriod) - timeSinceLastPing;

        console.log(`   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∏–Ω–≥: ${new Date(Number(lastPing) * 1000).toLocaleString()}`);
        console.log(`   ‚åõ –ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è: ${Number(willActivateWaitingPeriod) / 60} –º–∏–Ω—É—Ç`);

        if (timeToActivation > 0) {
            console.log(`   ‚ÑπÔ∏è –î–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–≤–µ—â–∞–Ω–∏—è: ${Math.ceil(timeToActivation / 60)} –º–∏–Ω—É—Ç`);
            return;
        }

        console.log(`   ‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º checkAndTransfer...`);
        
        // –í—ã–∑—ã–≤–∞–µ–º checkAndTransfer –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏
        const tx = await factory.checkAndTransfer(willAddress);
        
        console.log(`   üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –•—ç—à: ${tx.hash}`);
        console.log(`   ‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...`);
        
        const receipt = await tx.wait();
        console.log(`   ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! Gas: ${receipt.gasUsed.toString()}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        const newBalance = await ethers.provider.getBalance(willAddress);
        console.log(`   üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${ethers.formatEther(newBalance)} ETH`);
        
    } catch (error) {
        if (error.message.includes("Will is still active")) {
            console.log(`   ‚ÑπÔ∏è –ó–∞–≤–µ—â–∞–Ω–∏–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ - –ø–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–µ –∏—Å—Ç–µ–∫`);
        } else if (error.message.includes("Not enough balance")) {
            console.log(`   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞`);
        } else if (error.message.includes("Transfer failed")) {
            console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤`);
        } else {
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–µ—â–∞–Ω–∏—è ${willAddress}:`, error.message);
        }
    }
}

main().catch((error) => {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    process.exit(1);
});