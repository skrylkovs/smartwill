const { ethers } = require("hardhat");

async function main() {
    console.log("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ SmartWill...");
    
    const [signer] = await ethers.getSigners();
    console.log("üìù –¢–µ—Å—Ç–µ—Ä:", signer.address);
    
    const factoryAddress = "0x5C8798C418B8613F71C7e35450307F08a9008558";
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ñ–∞–±—Ä–∏–∫–µ
    const SmartWillFactory = await ethers.getContractFactory("SmartWillFactory");
    const factory = SmartWillFactory.attach(factoryAddress);
    
    console.log("üìã –§–∞–±—Ä–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:", factoryAddress);
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const testParams = {
        heir: ethers.getAddress("0x742d35cc6634c0532925a3b8d4c9db96590c6c87"), // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π checksum
        heirName: "Test Heir",
        heirRole: "Son",
        transferAmount: ethers.parseEther("0.0001"), // 0.0001 ETH
        transferFrequency: 300, // 5 –º–∏–Ω—É—Ç
        willActivateWaitingPeriod: 600, // 10 –º–∏–Ω—É—Ç
        limit: ethers.parseEther("0.001") // 0.001 ETH
    };
    
    console.log("üìä –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:");
    console.log("- –ù–∞—Å–ª–µ–¥–Ω–∏–∫:", testParams.heir);
    console.log("- –ò–º—è:", testParams.heirName);
    console.log("- –†–æ–ª—å:", testParams.heirRole);
    console.log("- –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:", ethers.formatEther(testParams.transferAmount), "ETH");
    console.log("- –ß–∞—Å—Ç–æ—Ç–∞:", testParams.transferFrequency, "—Å–µ–∫—É–Ω–¥");
    console.log("- –ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è:", testParams.willActivateWaitingPeriod, "—Å–µ–∫—É–Ω–¥");
    console.log("- –õ–∏–º–∏—Ç:", ethers.formatEther(testParams.limit), "ETH");
    
    try {
        console.log("\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—â–∞–Ω–∏—è...");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        const balance = await ethers.provider.getBalance(signer.address);
        console.log("üí∞ –ë–∞–ª–∞–Ω—Å —Ç–µ—Å—Ç–µ—Ä–∞:", ethers.formatEther(balance), "ETH");
        
        if (balance < testParams.limit) {
            throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
        }
        
        const tx = await factory.createSmartWill(
            testParams.heir,
            testParams.heirName,
            testParams.heirRole,
            testParams.transferAmount,
            testParams.transferFrequency,
            testParams.willActivateWaitingPeriod,
            testParams.limit,
            { 
                value: testParams.limit,
                gasLimit: 1000000 // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –≥–∞–∑–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            }
        );
        
        console.log("üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", tx.hash);
        const receipt = await tx.wait();
        
        if (receipt.status === 1) {
            console.log("‚úÖ –ó–∞–≤–µ—â–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!");
            console.log("‚õΩ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≥–∞–∑–∞:", receipt.gasUsed.toString());
            
            // –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ—â–∞–Ω–∏—è
            const event = receipt.logs.find(log => {
                try {
                    const parsed = factory.interface.parseLog(log);
                    return parsed.name === "WillCreated";
                } catch {
                    return false;
                }
            });
            
            if (event) {
                const parsed = factory.interface.parseLog(event);
                console.log("üè† –ê–¥—Ä–µ—Å –Ω–æ–≤–æ–≥–æ –∑–∞–≤–µ—â–∞–Ω–∏—è:", parsed.args.willAddress);
                console.log("üë§ –í–ª–∞–¥–µ–ª–µ—Ü:", parsed.args.owner);
            }
        } else {
            console.log("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å");
        }
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—â–∞–Ω–∏—è:");
        console.error(error.message);
        
        if (error.reason) {
            console.error("–ü—Ä–∏—á–∏–Ω–∞:", error.reason);
        }
        
        if (error.transaction) {
            console.error("–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error.transaction);
        }
    }
}

main()
    .then(() => process.exit(0))
    .catch(error => {
        console.error(error);
        process.exit(1);
    }); 