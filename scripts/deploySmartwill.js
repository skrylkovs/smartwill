const { ethers } = require("hardhat");
require("dotenv").config();
const { saveDeployedContract } = require("../utils/saveContract");

async function main() {
    const [deployer] = await ethers.getSigners();
    const balance = await ethers.provider.getBalance(deployer.address);

    console.log("üë§ –î–µ–ø–ª–æ–π –æ—Ç:", deployer.address);
    console.log("üí∏ –ë–∞–ª–∞–Ω—Å:", ethers.formatEther(balance), "ETH");

    const factoryAddress = '0x4Acc5767812147106a51E5b8292151A136eC81ba';
    
    // –ü–æ–ª—É—á–∞–µ–º ABI —Ñ–∞–±—Ä–∏–∫–∏
    const SmartWillFactory = await ethers.getContractFactory("SmartWillFactory");
    const factory = SmartWillFactory.attach(factoryAddress);
    
    console.log("üè≠ –ê–¥—Ä–µ—Å —Ñ–∞–±—Ä–∏–∫–∏:", factoryAddress);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SmartWill
    const heir = "0x0Db16194f9906d62f7C3953A3E46C5AB47bcF1e5"; // üîÅ –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–¥—Ä–µ—Å –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞
    const transferAmount = ethers.parseEther("0.0001"); // –°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫—É
    const transferFrequency = 60 * 3; // 3 –º–∏–Ω—É—Ç—ã
    const waitingPeriod = 60 * 5; // 5 –º–∏–Ω—É—Ç
    const deposit = ethers.parseEther("0.005"); // –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç

    console.log("üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≤–µ—â–∞–Ω–∏—è:");
    console.log("- –ù–∞—Å–ª–µ–¥–Ω–∏–∫:", heir);
    console.log("- –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:", ethers.formatEther(transferAmount), "ETH");
    console.log("- –ß–∞—Å—Ç–æ—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", transferFrequency, "—Å–µ–∫—É–Ω–¥");
    console.log("- –ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è:", waitingPeriod, "—Å–µ–∫—É–Ω–¥");
    console.log("- –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç:", ethers.formatEther(deposit), "ETH");

    try {
        console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ SmartWill...");
        const tx = await factory.createSmartWill(
            heir,
            transferAmount,
            transferFrequency,
            waitingPeriod,
            { value: deposit }
        );

        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");
        const receipt = await tx.wait();
        
        const event = receipt.logs.find(log => {
            try {
                return factory.interface.parseLog(log)?.name === "WillCreated";
            } catch {
                return false;
            }
        });

        if (event) {
            const parsedLog = factory.interface.parseLog(event);
            const willAddress = parsedLog.args.willAddress;
            console.log("‚úÖ –ù–æ–≤—ã–π SmartWill —Å–æ–∑–¥–∞–Ω –ø–æ –∞–¥—Ä–µ—Å—É:", willAddress);
            await saveDeployedContract(willAddress, "SmartWill");
        } else {
            console.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è");
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—â–∞–Ω–∏—è:");
        console.error(error.message || error);
        if (error.data) {
            console.error("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", error.data);
        }
    }
}

main().catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:", error);
    process.exit(1);
});