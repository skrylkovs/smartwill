const { ethers } = require("hardhat");
require("dotenv").config();
const { saveDeployedContract } = require("../utils/saveContract");

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ - –∞–¥—Ä–µ—Å SmartWillFactory
const FACTORY_ADDRESS = "0x2E8D7D43AC61d151Df374ee85d3Ad99fa510B709";

async function main() {
    const [deployer] = await ethers.getSigners();
    const balance = await ethers.provider.getBalance(deployer.address);

    console.log("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—â–∞–Ω–∏—è –æ—Ç:", deployer.address);
    console.log("üí∏ –ë–∞–ª–∞–Ω—Å:", ethers.formatEther(balance), "ETH");

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ñ–∞–±—Ä–∏–∫–µ
    console.log("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SmartWillFactory –ø–æ –∞–¥—Ä–µ—Å—É:", FACTORY_ADDRESS);
    const Factory = await ethers.getContractFactory("SmartWillFactory");
    const factory = Factory.attach(FACTORY_ADDRESS);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SmartWill
    const heir = "0x0Db16194f9906d62f7C3953A3E46C5AB47bcF1e5"; // üîÅ –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–¥—Ä–µ—Å –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞
    const transferAmount = ethers.parseEther("0.0001");
    const transferFrequency = 60 * 3; // 3 –º–∏–Ω—É—Ç—ã
    const waitingPeriod = 60 * 5; // 5 –º–∏–Ω—É—Ç
    const deposit = ethers.parseEther("0.005");

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ SmartWill...");
    const tx = await factory.createSmartWill(
        heir,
        transferAmount,
        transferFrequency,
        waitingPeriod,
        { value: deposit }
    );

    console.log("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");
    const receipt = await tx.wait();
    const event = receipt.logs.find(log => log.fragment?.name === "WillCreated");

    if (event) {
        const willAddress = event.args.willAddress;
        console.log("‚úÖ –ù–æ–≤—ã–π SmartWill —Å–æ–∑–¥–∞–Ω –ø–æ –∞–¥—Ä–µ—Å—É:", willAddress);
        saveDeployedContract(willAddress, "SmartWill");
    } else {
        console.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è");
    }
}

main().catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ—â–∞–Ω–∏—è:", error);
    process.exit(1);
}); 