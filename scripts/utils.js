const fs = require("fs");
const path = require("path");

const DATABASE_DIR = path.join(__dirname, "../database"); // ‚úÖ –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
const CONTRACTS_FILE = path.join(DATABASE_DIR, "contracts.json"); // ‚úÖ –§–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è `database/contracts.json`, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
function ensureContractsFileExists() {
    try {
        if (!fs.existsSync(DATABASE_DIR)) {
            fs.mkdirSync(DATABASE_DIR, { recursive: true }); // ‚úÖ –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            console.log("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è database —Å–æ–∑–¥–∞–Ω–∞.");
        }

        if (!fs.existsSync(CONTRACTS_FILE)) {
            fs.writeFileSync(CONTRACTS_FILE, JSON.stringify([])); // ‚úÖ –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π JSON, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
            console.log("üìÑ –§–∞–π–ª contracts.json —Å–æ–∑–¥–∞–Ω.");
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ database/contracts.json:", error.message);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç-–∞–¥—Ä–µ—Å–∞
function getLastContractAddress() {
    ensureContractsFileExists(); // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º

    try {
        const contractData = JSON.parse(fs.readFileSync(CONTRACTS_FILE, "utf8"));
        if (!Array.isArray(contractData) || contractData.length === 0) {
            throw new Error("‚ùå –û—à–∏–±–∫–∞: contracts.json –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.");
        }

        return contractData[contractData.length - 1].contract_id; // ‚úÖ –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è contracts.json:", error.message);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
function getContractAddress() {
    return getLastContractAddress();
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ contracts.json
function saveContractAddress(contractAddress) {
    ensureContractsFileExists(); // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    let contracts = [];

    try {
        const data = fs.readFileSync(CONTRACTS_FILE, "utf8");
        contracts = JSON.parse(data);
    } catch (error) {
        console.error("‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è contracts.json:", error.message);
    }

    contracts.push({ contract_id: contractAddress });

    try {
        fs.writeFileSync(CONTRACTS_FILE, JSON.stringify(contracts, null, 2));
        console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ database/contracts.json");
    } catch (error) {
        console.error("‚ö† –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ contracts.json:", error.message);
    }
}

module.exports = { getLastContractAddress, getContractAddress, saveContractAddress };